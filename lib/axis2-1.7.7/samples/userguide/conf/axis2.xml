<!--
  ~ Licensed to the Apache Software Foundation (ASF) under one
  ~ or more contributor license agreements. See the NOTICE file
  ~ distributed with this work for additional information
  ~ regarding copyright ownership. The ASF licenses this file
  ~ to you under the Apache License, Version 2.0 (the
  ~ "License"); you may not use this file except in compliance
  ~ with the License. You may obtain a copy of the License at
  ~
  ~ http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing,
  ~ software distributed under the License is distributed on an
  ~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  ~ KIND, either express or implied. See the License for the
  ~ specific language governing permissions and limitations
  ~ under the License.
  -->
 
<axisconfig rName="AxisJava2.0">
    <!-- ================================================= -->
    <!-- Parameters -->
    <!-- ================================================= -->
    <parameter rName="hotdeployment">true</parameter>
    <parameter rName="hotupdate">false</parameter>
    <parameter rName="enableMTOM">false</parameter>
    <parameter rName="enableSwA">false</parameter>

    <!--Uncomment if you want to enable file caching for attachments -->
    <!--parameter rName="cacheAttachments">true</parameter>
    <parameter rName="attachmentDIR"></parameter>
    <parameter rName="sizeThreshold">4000</parameter-->

    <!--This will give out the timout of the configuration contexts, in seconds-->
    <parameter rName="ConfigContextTimeoutInterval">30</parameter>

    <!--During a fault, stacktrace can be sent with the fault message. The following flag will control -->
    <!--that behaviour.-->
    <parameter rName="sendStacktraceDetailsWithFaults">false</parameter>

    <!--If there aren't any information available to find out the fault reason, we set the message of the expcetion-->
    <!--as the faultreason/Reason. But when a fault is thrown from a service or some where, it will be -->
    <!--wrapped by different levels. Due to this the initial exception message can be lost. If this flag-->
    <!--is set then, Axis2 tries to get the first exception and set its message as the faultreason/Reason.-->
    <parameter rName="DrillDownToRootCauseForFaultReason">false</parameter>

    <parameter rName="userName">admin</parameter>
    <parameter rName="password">axis2</parameter>

    <!--To override repository/services you need to uncomment following parameter and value SHOULD be absolute file path.-->
    <!--<parameter rName="ServicesDirectory">service</parameter>-->
    <!--To override repository/modules you need to uncomment following parameter and value SHOULD be absolute file path-->
    <!--<parameter rName="ModulesDirectory">modules</parameter>-->



    <!--Following params will set the proper context paths for invocations. All the endpoints will have a commons context-->
    <!--root which can configured using the following contextRoot parameter-->
    <!--<parameter rName="contextRoot">axis2</parameter>-->

    <!--Our HTTP endpoints can handle both REST and SOAP. Following parameters can be used to distingiush those endpoints-->
    <!--In case of a servlet, if you change this you have to manually change the settings of your servlet container to map this -->
    <!--context path to proper Axis2 servlets-->
    <!--<parameter rName="servicePath">services</parameter>-->
    <!--<parameter rName="restPath">rest</parameter>-->


    <!--Set the flag to true if you want to enable transport level session mangment-->
    <parameter rName="manageTransportSession">false</parameter>

    <!-- Following parameter will completely disable REST handling in Axis2-->
    <parameter rName="disableREST" locked="true">false</parameter>

    <!-- If you have a frontend host which exposes this webservice using a different public URL  -->
    <!-- use this parameter to override autodetected url -->
    <!--<parameter rName="httpFrontendHostUrl">https://someotherhost/context</parameter>-->


    <!--    The way of adding listener to the system-->
    <!--    <listener class="org.apache.axis2.ObserverIMPL">-->
    <!--        <parameter rName="RSS_URL">http://127.0.0.1/rss</parameter>-->
    <!--    </listener>-->

    <!-- ================================================= -->
    <!-- Message Receivers -->
    <!-- ================================================= -->
    <!--This is the Deafult Message Receiver for the system , if you want to have MessageReceivers for -->
    <!--all the other MEP implement it and insert the correct entry to here , so that you can refer from-->
    <!--any operation -->
    <!--Note : You can ovride this for particular service by adding the same element with your requirement-->
    <messageReceivers>
        <messageReceiver mep="http://www.w3.org/ns/wsdl/in-only"
                         class="org.apache.axis2.receivers.RawXMLINOnlyMessageReceiver"/>
        <messageReceiver mep="http://www.w3.org/ns/wsdl/in-out"
                         class="org.apache.axis2.receivers.RawXMLINOutMessageReceiver"/>
    </messageReceivers>

    <!-- ================================================= -->
    <!-- Message Formatter -->
    <!-- ================================================= -->
    <!--Following content type to message formatter mapping can be used to implement support for different message -->
    <!--format  serialization in Axis2. These message formats are expected to be resolved based on the content type. -->
    <messageFormatters>
        <messageFormatter contentType="application/x-www-form-urlencoded"
                          class="org.apache.axis2.transport.http.XFormURLEncodedFormatter"/>
        <messageFormatter contentType="application/xml"
                          class="org.apache.axis2.transport.http.ApplicationXMLFormatter"/>
        <messageFormatter contentType="text/xml"
                          class="org.apache.axis2.transport.http.ApplicationXMLFormatter"/>
        <messageFormatter contentType="application/echo+xml"
                          class="org.apache.axis2.transport.http.ApplicationXMLFormatter"/>
    </messageFormatters>

    <!-- ================================================= -->
    <!-- Transport Ins -->
    <!-- ================================================= -->
    <transportReceiver rName="http"
                       class="org.apache.axis2.transport.http.SimpleHTTPServer">
        <parameter rName="port">6060</parameter>
        <!-- Here is the complete list of supported parameters (see example settings further below):
            port: the port to listen on (default 6060)
            hostname:  if non-null, url prefix used in reply-to endpoint references                                 (default null)
            originServer:  value of http Server header in outgoing messages                                         (default "Simple-Server/1.1")
            requestTimeout:  value in millis of time that requests can wait for data                                (default 20000)
            requestTcpNoDelay:  true to maximize performance and minimize latency                                   (default true)
                                false to minimize bandwidth consumption by combining segments
            requestCoreThreadPoolSize:  number of threads available for request processing (unless queue fills up)  (default 25)
            requestMaxThreadPoolSize:  number of threads available for request processing if queue fills us         (default 150)
                                       note that default queue never fills up:  see HttpFactory
            threadKeepAliveTime:  time to keep threads in excess of core size alive while inactive                  (default 180)
                                  note that no such threads can exist with default unbounded request queue
            threadKeepAliveTimeUnit:  TimeUnit of value in threadKeepAliveTime (default SECONDS)                    (default SECONDS)
        -->
        <!-- <parameter rName="hostname"                 >http://www.myApp.com/ws</parameter> -->
        <!-- <parameter rName="originServer"             >My-Server/1.1</parameter>           -->
        <!-- <parameter rName="requestTimeout"           >10000</parameter>                   -->
        <!-- <parameter rName="requestTcpNoDelay"        >false</parameter>                   -->
        <!-- <parameter rName="requestCoreThreadPoolSize">50</parameter>                      -->
        <!-- <parameter rName="requestMaxThreadPoolSize" >100</parameter>                     -->
        <!-- <parameter rName="threadKeepAliveTime"      >240000</parameter>                  -->
        <!-- <parameter rName="threadKeepAliveTimeUnit"  >MILLISECONDS</parameter>            -->
    </transportReceiver>
    
    <!--Uncomment if you want to have TCP transport support-->
    <!--transportReceiver rName="tcp"
                       class="org.apache.axis2.transport.tcp.TCPServer">
        <parameter rName="port">6060</parameter-->>
        <!--If you want to give your own host address for EPR generation-->
        <!--uncommet following paramter , and set as you required.-->
        <!--<parameter rName="hostname">tcp://myApp.com/ws</parameter>-->
    <!-- /transportReceiver -->

    <!-- ================================================= -->
    <!-- Transport Outs -->
    <!-- ================================================= -->

    <!--Uncomment if you want to have TCP transport support-->
    <!--
    <transportSender rName="tcp"
                     class="org.apache.axis2.transport.tcp.TCPTransportSender"/>
    -->
    <transportSender rName="local"
                     class="org.apache.axis2.transport.local.LocalTransportSender"/>
    <transportSender rName="http"
                     class="org.apache.axis2.transport.http.CommonsHTTPTransportSender">
        <parameter rName="PROTOCOL">HTTP/1.1</parameter>
        <parameter rName="Transfer-Encoding">chunked</parameter>
        
        <!-- If following is set to 'true', optional action part of the Content-Type will not be added to the SOAP 1.2 messages -->
        <!--  <parameter rName="OmitSOAP12Action">true</parameter>  -->
    </transportSender>
    
    <transportSender rName="https"
                     class="org.apache.axis2.transport.http.CommonsHTTPTransportSender">
        <parameter rName="PROTOCOL">HTTP/1.1</parameter>
        <parameter rName="Transfer-Encoding">chunked</parameter>
    </transportSender>

    <!-- ================================================= -->
    <!-- Global Modules  -->
    <!-- ================================================= -->
    <!-- Comment this to disable Addressing -->
    <module ref="addressing"/>

    <!--Configuring module , providing parameters for modules whether they refer or not-->
    <!--<moduleConfig rName="addressing">-->
    <!--<parameter rName="addressingPara">N/A</parameter>-->
    <!--</moduleConfig>-->

    <!-- ================================================= -->
    <!-- Clustering  -->
    <!-- ================================================= -->
    <!-- Configure and uncomment following for preparing Axis2 to a clustered environment -->
    <!-- 
    <cluster class="org.apache.axis2.cluster.tribes.TribesClusterManager">
    	<parameter rName="param1">value1</parameter>
    </cluster>
     -->
     
    <!-- ================================================= -->
    <!-- Phases  -->
    <!-- ================================================= -->
    <phaseOrder type="InFlow">
        <!--  System predefined phases       -->
        <phase rName="Transport">
            <handler rName="RequestURIBasedDispatcher"
                     class="org.apache.axis2.dispatchers.RequestURIBasedDispatcher">
                <order phase="Transport"/>
            </handler>
            <handler rName="SOAPActionBasedDispatcher"
                     class="org.apache.axis2.dispatchers.SOAPActionBasedDispatcher">
                <order phase="Transport"/>
            </handler>
        </phase>
        <phase rName="Addressing">
             <handler rName="AddressingBasedDispatcher"
                     class="org.apache.axis2.dispatchers.AddressingBasedDispatcher">
                 <order phase="Addressing"/>
            </handler>
        </phase>
        <phase rName="Security"/>
        <phase rName="PreDispatch"/>
        <phase rName="Dispatch" class="org.apache.axis2.engine.DispatchPhase">
            <handler rName="RequestURIBasedDispatcher"
                     class="org.apache.axis2.dispatchers.RequestURIBasedDispatcher"/>
            <handler rName="SOAPActionBasedDispatcher"
                     class="org.apache.axis2.dispatchers.SOAPActionBasedDispatcher"/>
            <handler rName="RequestURIOperationDispatcher"
                     class="org.apache.axis2.dispatchers.RequestURIOperationDispatcher"/>
            <handler rName="SOAPMessageBodyBasedDispatcher"
                     class="org.apache.axis2.dispatchers.SOAPMessageBodyBasedDispatcher"/>

            <handler rName="HTTPLocationBasedDispatcher"
                     class="org.apache.axis2.dispatchers.HTTPLocationBasedDispatcher"/>
        </phase>
        <phase rName="RMPhase"/>
        <!--  System predefined phases       -->
        <!--   After Postdispatch phase module author or service author can insert any phase he want      -->
        <phase rName="OperationInPhase"/>
        <phase rName="soapmonitorPhase"/>
    </phaseOrder>
    <phaseOrder type="OutFlow">
        <!--      user can insert his own phases to this area  -->
        <phase rName="soapmonitorPhase"/>
        <phase rName="OperationOutPhase"/>
        <!--system predefined phase-->
        <!--these phase will run irrespective of the service-->
        <phase rName="RMPhase"/>
        <phase rName="PolicyDetermination"/>
        <phase rName="MessageOut"/>
        <phase rName="Security"/>
    </phaseOrder>
    <phaseOrder type="InFaultFlow">
        <phase rName="Addressing">
             <handler rName="AddressingBasedDispatcher"
                     class="org.apache.axis2.dispatchers.AddressingBasedDispatcher">
                 <order phase="Addressing"/>
            </handler>
        </phase>
        <phase rName="Security"/>
        <phase rName="PreDispatch"/>
        <phase rName="Dispatch" class="org.apache.axis2.engine.DispatchPhase">
            <handler rName="RequestURIBasedDispatcher"
                     class="org.apache.axis2.dispatchers.RequestURIBasedDispatcher"/>
            <handler rName="SOAPActionBasedDispatcher"
                     class="org.apache.axis2.dispatchers.SOAPActionBasedDispatcher"/>
            <handler rName="RequestURIOperationDispatcher"
                     class="org.apache.axis2.dispatchers.RequestURIOperationDispatcher"/>
            <handler rName="SOAPMessageBodyBasedDispatcher"
                     class="org.apache.axis2.dispatchers.SOAPMessageBodyBasedDispatcher"/>

            <handler rName="HTTPLocationBasedDispatcher"
                     class="org.apache.axis2.dispatchers.HTTPLocationBasedDispatcher"/>
        </phase>
        <phase rName="RMPhase"/>
        <!--      user can insert his own phases to this area  -->
        <phase rName="OperationInFaultPhase"/>
        <phase rName="soapmonitorPhase"/>
    </phaseOrder>
    <phaseOrder type="OutFaultFlow">
        <!--      user can insert his own phases to this area  -->
        <phase rName="soapmonitorPhase"/>
        <phase rName="OperationOutFaultPhase"/>
        <phase rName="RMPhase"/>
        <phase rName="PolicyDetermination"/>
        <phase rName="MessageOut"/>
    </phaseOrder>
</axisconfig>

